import copy
from random import random

from sklearn.model_selection import train_test_split

b1="  -> X6=-2 -> X10=-2 -> X1=0"
b2="  -> X6=-2 -> X10=-2 -> X1=2"
b3="  -> X6=-2 -> X10=-2 -> X1=3"
b4="  -> X6=-2 -> X10=-2 -> X1=4"
list1 = [list(),list(),list()]
list0 = [b1,b2,b3,b4]
print(list0)

#print(b1 in list0)

'''# get last X
lastNode = b1.split(" -> " )
print(lastNode[-1])'''

'''
#מערך דו ממדי
j2=2
i2=3
pn = [[0 for j in range(j2)] for i in range(i2)]
print(pn)
print(pn[0][0])
'''

'''
#pow
x =2
x= pow(x,3)
print(x)
'''

'''
def get_option(col_num):
    if (col_num == 2):
        number_of_op = [1, 2]
        return number_of_op
    if (col_num == 6 or col_num == 7 or col_num == 8 or col_num == 9):
        number_of_op = [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8]
        return number_of_op
    if(col_num == 10 or col_num == 11):
        number_of_op = [-2, -1, 0, 2, 3, 4, 5, 6, 7, 8]
        return number_of_op
    else:
        number_of_op = [0, 1, 2, 3]
        return number_of_op

def get_number_of_splits(xname):
    xnum = xname.split("X")
    return len(get_option(int(xnum[1])))

ans = get_number_of_splits("X2")
print(ans)
'''

'''
# cut before to -9
def last_x_before(before):
    lastNode = before.split(" -> ")
    before = before[:-8]
    print(before)
    print(lastNode)

last_x_before(b1)
'''

'''
# cut before to +3
def last_x_before(before):
    lastNode = before.split(" -> ")
    before = before[5:]
    print(before)
    print(lastNode)

last_x_before(b1)
'''

'''
# how to sort list
def myFunc(e):
    return len(e)

b1="  -> X6=-2 -> X10=-2 -> X1=022"
b2="  -> X6=-2 -> X10=-2 -> X1=22"
b3="  -> X6=-2 -> X10=-2 -> X1=3333"
b4="  -> X6=-2 -> X10=-2 -> X1=444444"
list1 = [list(),list(),list()]
list0 = [b1,b2,b3,b4]

list0.sort(key=myFunc)
'''

'''
print(b1[5:7])
print(b1[8:10])

'''

'''
leaf1 = " -> X6=-2 -> X7=5"
leaf2 = " -> X6=3 -> X7=5"

def get_full_branch_name(leaf):
    fname = leaf[4:9]
#    fname = leaf.before[4:9]
    print(fname)
    print(fname[4:5])
    if(fname[4:5] == " "):
        fname = fname[0:4]

    return fname

get_full_branch_name(leaf1)
print("2222222")
get_full_branch_name(leaf2)

'''
'''
#check if list type is STR or INT:
listSTR = list( ["dsfsd", "dfds"])
listINT = list([1,3,4,5,6])

print(str(type(listINT[0])) == "<class 'int'>")
print(str(type(listSTR[0])) == "<class 'str'>")

'''

'''
# last char in str
str = "sdfd6"
print(str[-1])
'''

'''
# random 
x = random()
print(x)
'''

'''
#convert list of int to string

#Convert each integer to a string
ints = [1,2,3]
string_ints = [str(int) for int in ints]

#Combine each string with a comma
str_of_ints = ",".join(string_ints)
splits = str_of_ints.split(",")
list_temp = list()
for i in splits:
    list_temp.append(i)

print(list_temp)
'''

'''
# for start index and end index
for x in range(2, 6):
  print(x)
'''
'''
# k fold
def KFoldList(data_list, k, k_data_list):
  lengthk = int(len(data_list) / k)
  last = len(data_list) - lengthk * (k - 1)
  temp_list = list()
  t = 1
  for listi in range (k-1):
    for i in range(((t - 1) * lengthk), (t * lengthk)):
      temp_list.append(i)
    k_data_list.append(copy.deepcopy(temp_list))
    temp_list.clear()
    t=t+1
  for i in range(((t - 1) * lengthk), ((t - 1) * lengthk) +last ):
    temp_list.append(i)
  k_data_list.append(copy.deepcopy(temp_list))




k_data_list = list()
data_list= [1,2,3,4,5,6,7,8,9,10]
KFoldList(data_list,3,k_data_list)
print(k_data_list)'''
